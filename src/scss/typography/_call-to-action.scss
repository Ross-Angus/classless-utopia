@use '../mixins/cta-input.scss';
@use '../mixins/cta-style.scss';

// To make an anchor tag into a call-to-action, it needs a `rel` attribute.
// This can take a lot of different values but the normal one is `rel="related"`
// This is poorly explained here:

// https://www.rfc-editor.org/rfc/rfc4287.html

// 'The value "related" signifies that the IRI in the value of the
// href attribute identifies a resource related to the resource
// described by the containing element.  For example, the feed for a
// site that discusses the performance of the search engine at
// "http://search.example.com" might contain, as a child of
// atom:feed'

// While this approach could justifiably be criticised as simply a class by
// another name, the `rel` attribute does have semantic meaning whereas
// `class` does not. Despite the indication above that `rel="related"` should
// only apply to `link` elements, using it on an anchor tag passes validation.

// The second top-level selector here (`header > *:not(nav)`) is intended to
// allow call-to-action buttons which sit in the root of the site (so they
// can be full bleed) but are distinct from the main navigation (which also
// sits inside a `header` element).
main, header > *:not(nav) {
  button, a[rel] {
    @extend %cta-input !optional;
    @extend %cta-style !optional;
    align-items: center;
    display: inline-flex;
    width: fit-content;

    &::before, &::after {
      content: "";
      height: 1ch;
      // Required, to prevent chevron from collapsing if the text
      // within the call-to-action wraps
      min-width: 1ch;
      transform: rotate(45deg);
      transition: transform 0.5s;
      width: 1ch;
    }

    &::before { display: none; }

    &:hover, &:focus {
      @extend %cta-focus !optional;

      // > animates to the right slightly
      &::after {
        transform: rotate(45deg) translate(0.5ch, -0.5ch);
      }
    }

    // Red-shifted and blurred
    &:active {
      filter: hue-rotate(70deg) blur(0.05rem);
    }

    // Default call-to-action buttons have a right facing chevron
    // >
    &::after {
      border-right: solid var(--keyline) var(--bodytext);
      border-top: solid var(--keyline) var(--bodytext);
      border-right-color: inherit;
      border-top-color: inherit;
      display: inline-block;
      margin: 0 0 0 calc(var(--gutter) / 2);
    }

    // Back buttons have a left facing chevron
    // <
    &[rel="prev"], &[rel="previous"], &[rel="first"], &[rel="start"] {
      &::before {
        border-bottom: solid var(--keyline) var(--bodytext);
        border-left: solid var(--keyline) var(--bodytext);
        border-bottom-color: inherit;
        border-left-color: inherit;
        display: inline-block;
        margin: 0 calc(var(--gutter) / 2) 0 0;
      }

      &::after { display: none; }

      &:hover, &:focus {
        &::before {
          transform: rotate(45deg) translate(-0.5ch, 0.5ch);
        }
      }
    }

    // The difference between `prev` and `previous` is that `previous`
    // has a backward facing arrow (like a back button) and `prev`
    // only has a chevron
    // --
    &[rel="previous"] {
      &::before { order: -2; }

      &::after {
        border-right: none;
        display: block;
        height: auto;
        order: -1;
        margin: 0 calc(var(--gutter) / 2) 0 calc(var(--gutter) * -1);
        transform: none;
        width: var(--gutter);
      }

      &:hover, &:focus {
        &::after {
          // Because the < is a rotated square, this 0.707 figure is from trigonometry
          transform: translate(-0.707ch, 0);
        }
      }
    }

    // Help link (?)
    // https://html.spec.whatwg.org/multipage/links.html#link-type-help
    &[rel="help"] {
      &::after {
        background: var(--bodytext);
        border: none;
        border-radius: 50%;
        color: var(--background);
        content: "?";
        height: 3ch;
        line-height: 3ch;
        text-align: center;
        transform: none;
        width: 3ch;
      }

      &:link::after {
        background: rgb(var(--link-text));
      }

      &:visited::after {
        background: rgb(var(--link-visited-text));
      }

      &:hover, &:focus {
        &::after { transform: scale(1.2); }
      }
    }

    // Combining rules to create |
    &[rel="first"]::after, &[rel="start"]::after, &[rel="last"]::before {
      display: block;
      // This needs to roughly match the size of < and > which are
      // rotated squares so trigonometry would be required for
      // perfect accurate height
      height: calc(var(--bodytext-size) * 0.75);
      margin: 0;
      transform: none;
      width: auto;
    }

    // First or start links - good for pagination
    &[rel="first"], &[rel="start"] {
      // |
      &::after {
        border-top: none;
        order: -1;
      }

      &:hover, &:focus {
        // Because the < is a rotated square, this 0.707 figure is from trigonometry
        &::after { transform: translate(-0.707ch, 0); }
      }
    }

    // Last links
    &[rel="last"] {
      // |
      &::before {
        border-left: solid var(--keyline) var(--bodytext);
        border-color: inherit;
        order: 9;
      }

      &:hover, &:focus {
        &::before { transform: translate(0.707ch, 0); }
      }
    }
  }

  a[rel] {
    background: rgb(var(--link-text) / 20%);
    border-color: rgb(var(--link-text));
    color: rgb(var(--link-text));
    text-decoration: none;
    transition: filter 0.5s;

    &::before, &::after {
      border-color: rgb(var(--link-text));
    }

    // See https://developer.mozilla.org/en-US/docs/Web/CSS/:visited
    &:visited {
      background: rgb(var(--link-visited-text) / 20%);
      border-color: rgb(var(--link-visited-text));
      color: rgb(var(--link-visited-text));

      &::before, &::after {
        border-color: rgb(var(--link-visited-text));
      }
    }
  }

  // Small buttons - font-size inherited from `small` tag
  small {
    button, a[rel] {
      min-height: 2.75rem; // ~ 44px high
    }
  }
}
