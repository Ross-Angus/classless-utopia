@use '../_mixins';
@use '_main-spacer.scss';

// Stylesheet for the main navigation, which switches between horizontal
// and vertical, depending upon if the top level needs to wrap or not
// Horizontal style
[data-layout="horizontal"] {
  @extend %main-nav-shared;
  position: relative;

  & > li {
    padding: var(--gutter);

    // Subnav mega-menus
    & > ul {
      columns: var(--nav-columns);
      column-gap: var(--gutter);
      left: 0;
      opacity: 1;
      position: absolute;
      right: 0;
      top: 100%;
      transform-origin: 0 0;
      transition: all .5s;
      z-index: 1;

      &[hidden] {
        opacity: 0;
        transform: scale(1, 0);
        display: block;
      }

      // See developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
      @media (prefers-reduced-motion) {
        &[hidden] { display: none; }
      }
    }
  }
}

[data-layout="vertical"] {
  background: var(--tint3);
  left: 0;
  padding: var(--gutter);
  position: absolute;
  top: 0;
  transform: translate(0, 0);
  transition: all .5s;
  width: calc(100% - (var(--gutter) * 3));

  &[hidden] {
    display: block;
    transform: translate(-100%, 0);
  }
  @media (prefers-reduced-motion) {
    &[hidden] { display: none; }
  }
}

// Mobile first - vertical layout
header {

  & > nav {
    background: var(--tint2);
  }

  nav {
    align-items: flex-start;
    display: flex;
    justify-content: flex-end;
    position: relative;

    ul { width: 100%; }

    li {
      align-items: center;
      display: flex;
      // We need the first level to wrap because this determines the horizontal
      // or vertical layout
      flex-wrap: wrap;
      gap: 0 var(--gutter);

      // The anchor tag and the sub-nav toggle button have a kind of media object
      // layout but the following `ul` sub-nav is also subject to the same flexbox
      // container. The sub-nav has a `width: 100%` declaration and the following
      // two declarations ensure that the anchor takes up as much space as possible,
      // while also leaving space for the toggle button. Unless the toggle button
      // isn't there, in which case it will take up all of the space.
      a, strong {
        flex-basis: calc(100% - (var(--gutter) * 2));
        flex-grow: 2;
      }
      // Marking when the user has opened a sub-navigation
      // This verges dangerously close to adding classes, but just of a different
      // type as the `data-selected` attribute is added and removed by JavaScript
      // and not used to identify the list item. I originally used the next-sibling
      // selector and switched the order of `button` and `a` in the markup but
      // this would have limited the layout without some tricky CSS. This maintains
      // the spirit of what I set out to do, in that the markup itself doesn't have
      // classes and this is added automatically.
      &[data-selected="true"] { background: var(--tint1); }

    }
    // Navigation toggle buttons
    // Animates between v and ^
    button {
      appearance: none;
      background: transparent;
      border: none;
      color: inherit;
      cursor: pointer;
      height: var(--gutter);
      overflow: visible;
      padding: 0;
      position: relative;
      width: var(--gutter);

      &:before, &:after {
        @extend %btn-chevron-closed-pseudo;
        top: calc(50% - (var(--keyline) / 2));
      }

      // \
      &:before {
        left: 0;
        @extend %btn-chevron-se;
      }
      // /
      &:after {
        left: 50%;
        @extend %btn-chevron-ne;
      }
      &[aria-expanded="true"] {
        // /
        &:before { @extend %btn-chevron-ne; }
        // \
        &:after { @extend %btn-chevron-se; }
      }

      // Burger menu
      &[data-js="mainnav-toggle"] {
        @extend %btn-burger;
        margin: var(--gutter);

        // Resetting ^ & v to --
        &:before, &:after {
          @extend %btn-burger-pseudo;
        }

        // Ã—
        &[aria-expanded="true"]{
          border-color: transparent;
          &:before { @extend %btn-burger-open-before; }
          &:after { @extend %btn-burger-open-after; }
        }
      }
    }

    li {

      [aria-expanded="true"] {
        background: var(--tint1);
      }

      // Second level navigation
      ul {
        background: var(--tint1);
        padding: var(--gutter);
        transform: scale(1, 1);
      }
    }
  }
}
