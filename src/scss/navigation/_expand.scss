@use "../mixins/shapes.scss";

// Firefox doesn't support the selector `::details-content` *or* the method `calc-size()`
// (at the time of writing). But this is the least problematic method of achieving the
// desired effect. The animation only works in one direction. This was true for the
// previous method too. Shame.
details {
  border: solid var(--keyline) var(--bodytext);
  margin: 0 0 var(--gutter);
  padding: var(--gutter);

  summary {
    font-weight: var(--heading-weight);
    margin: calc(var(--gutter) * -1);
    // To leave space for the vertical chevron
    padding: var(--gutter) calc(var(--gutter) * 2) var(--gutter) var(--gutter);
    position: relative;

    &::marker {
      content: none;
    }

    // ^ or v: vertical chevron button, reusing some declarations from
    // the navigation.
    // As the container is an unknown size, we need to have other
    // left and top values.
    &::before,
    &::after {
      @extend %btn-chevron-closed-pseudo;
      content: "";
      position: absolute;
      // Magic numbers alarm
      top: calc(var(--gutter) * 1.6);
    }

    // \
    &::before {
      @extend %btn-chevron-se;
      right: calc((var(--gutter) / 2) + var(--gutter));
    }

    // /
    &:after {
      @extend %btn-chevron-ne;
      right: var(--gutter);
    }
  }

  &::details-content {
    height: 0;
    overflow-y: clip;
    transition: height 0.5s ease-in;
  }

  // Adjacent `details` are flush with each other, if both have a `name`
  // attribute (the `name` doesn't have to have the same value)
  &[name] + details[name] {
    margin-top: calc((var(--gutter) + var(--keyline)) * -1);
  }

  &[open] {
    summary {
      border-bottom: solid var(--keyline) var(--tint2);
      margin-bottom: var(--gutter);
      // /
      &:before {
        @extend %btn-chevron-ne;
      }
      // \
      &:after {
        @extend %btn-chevron-se;
      }
    }

    &::details-content {
      // If the browser understands the selector `::details-content` but
      // doesn't support the `calc-size()` function, then we need to use the
      // `height: auto` fallback.
      height: auto;
      height: calc-size(auto, size);
    }
  }
}

// Where `details` is used inside of a `nav` tag, it can be added to a page
// like a table of contents.
// https://www.nngroup.com/articles/table-of-contents/
nav {
  details {
    ul {
      li {
        padding-left: calc(var(--gutter) * 1.5);
        position: relative;

        // â–¶
        // Many of these styles are inherited from the unordered list styles
        &::before {
          border-radius: 0;
          border: solid calc(var(--gutter) / 3) transparent;
          border-left: solid calc(var(--gutter) / 2) var(--bodytext);
          border-right-width: 0;
          display: block;
          left: 0;
          top: calc(var(--gutter) / 2);
        }

        a {
          display: block;
        }
      }
    }
  }
}
